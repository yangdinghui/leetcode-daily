package cn.leetcode.剑指Offer.剪绳子;

/**
 * @author yangdh
 * @desc 剪绳子:给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n>1并且m>1），
 * 每段绳子的长度记为 k[0],k[1]...k[m-1] 。请问 k[0]*k[1]*...*k[m-1] 可能的最大乘积是多少？
 * 例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。
 * 示例 1：
 * 输入: 2
 * 输出: 1
 * 解释: 2 = 1 + 1, 1 × 1 = 1
 * 示例2:
 * 输入: 10
 * 输出: 36
 * 解释: 10 = 3 + 3 + 4, 3 ×3 ×4 = 36
 * 提示：
 * 2 <= n <= 58
 * 数学 动态规划
 * @date 2023/3/28 22:49
 */
public class Solution23032801 {
    /**
     * 任何大于1的数都可由2和3相加组成（根据奇偶证明）
     * 因为2x2 = 1x4，2x3>1x5, 所以将数字拆成2和3，能得到的积最大
     * @param n
     * @return
     */
    public int cuttingRope(int n) {
        if (n == 1 || n == 2) return 1;
        if (n == 3) return 2;
        int sum = 1;
        while (n > 4) {
            sum *= 3;
            n -= 3;
        }
        return sum * n;
    }
}
